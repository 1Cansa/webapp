<?php
// app/Models/Client.php

namespace App\Models;

use PDO;

/**
 * Class Client
 *
 * Handles all database operations related to the 'clients' table,
 * including CRUD operations and contact associations.
 */
class Client extends BaseModel
{
    protected $table = 'clients';

    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Generates a unique client code based on the client's name.
     * Format: 3 uppercase letters + 3-digit number (e.g., FNB001).
     * 
     * Rules:
     * - Single-word names:
     *     - If < 3 letters, pad with 'A' (e.g., "IT" → "ITA").
     *     - If ≥ 3 letters, take the first 3 (e.g., "Apple" → "APP").
     * - Two-word names:
     *     - Take the first 2 letters of the first word and 1 from the second (e.g., "Banque Centrale" → "BAC").
     * - Three or more words:
     *     - Take the first letter of each of the first 3 words (e.g., "First National Bank" → "FNB").
     * 
     * The numeric suffix is generated by checking existing codes and incrementing to ensure uniqueness.
     *
     * @param string $name The full name of the client
     * @return string The generated unique client code
     */
    private function generateClientCode(string $name): string
    {
        $name = strtoupper(trim($name));
        $words = preg_split('/\s+/', $name);
        $baseCode = '';

        // Generate the 3-letter prefix based on name structure
        if (count($words) === 1) {
            $word = $words[0];
            $baseCode = strlen($word) >= 3
                ? substr($word, 0, 3)
                : str_pad($word, 3, 'A'); // Pad short names (e.g., "IT" → "ITA")
        } elseif (count($words) === 2) {
            $baseCode = substr($words[0], 0, 2) . substr($words[1], 0, 1); // e.g., "Banque Centrale" → "BAC"
        } else {
            // Take first letters of the first 3 words (e.g., "First National Bank" → "FNB")
            $baseCode =
                substr($words[0], 0, 1) .
                substr($words[1], 0, 1) .
                substr($words[2], 0, 1);
        }

        // Retrieve existing codes starting with the generated prefix
        $stmt = $this->db->prepare("SELECT client_code FROM {$this->table} WHERE client_code LIKE :prefix");
        $stmt->execute(['prefix' => $baseCode . '%']);
        $existingCodes = $stmt->fetchAll(PDO::FETCH_COLUMN);

        // Append an incremental 3-digit number to ensure uniqueness
        $nextNum = 1;
        do {
            $suffix = str_pad($nextNum, 3, '0', STR_PAD_LEFT);
            $clientCode = $baseCode . $suffix;
            $nextNum++;
        } while (in_array($clientCode, $existingCodes));

        return $clientCode;
    }

    /**
     * Create a new client with a generated unique client code.
     *
     * @param array $data Client data including 'name'
     * @return bool True on success, false otherwise
     */
    public function create(array $data)
    {
        $data['client_code'] = $this->generateClientCode($data['name']);

        $stmt = $this->db->prepare("INSERT INTO {$this->table} (name, client_code) VALUES (:name, :client_code)");
        return $stmt->execute([
            'name' => $data['name'],
            'client_code' => $data['client_code']
        ]);
    }


    /**
     * Update an existing client's name.
     *
     * @param int $id Client ID
     * @param array $data Client data (only 'name' is used)
     * @return bool
     */
    public function update($id, array $data)
    {
        $stmt = $this->db->prepare("UPDATE {$this->table} SET name = :name WHERE id = :id");
        return $stmt->execute([
            'name' => $data['name'],
            'id' => $id
        ]);
    }

    /**
     * Delete a client and all linked associations with contacts.
     *
     * @param int $id Client ID
     * @return bool
     */
    public function delete($id)
    {
        // First, remove all associations with contacts
        $stmt = $this->db->prepare("DELETE FROM client_contacts WHERE client_id = :client_id");
        $stmt->execute(['client_id' => $id]);

        // Then, delete the client
        $stmt = $this->db->prepare("DELETE FROM {$this->table} WHERE id = :id");
        return $stmt->execute(['id' => $id]);
    }

    /**
     * Find a client by its unique client code.
     *
     * @param string $code
     * @return array|false
     */
    public function findByCode($code)
    {
        $stmt = $this->db->prepare("SELECT * FROM {$this->table} WHERE client_code = :code");
        $stmt->execute(['code' => $code]);
        return $stmt->fetch(PDO::FETCH_ASSOC);
    }

    /**
     * Get all contacts linked to a specific client.
     *
     * @param int $clientId
     * @return array
     */
    public function getLinkedContacts($clientId)
    {
        $stmt = $this->db->prepare("
            SELECT c.id, c.first_name, c.last_name, c.email
            FROM contacts c
            JOIN client_contacts cc ON c.id = cc.contact_id
            WHERE cc.client_id = :client_id
            ORDER BY c.last_name ASC, c.first_name ASC
        ");
        $stmt->execute(['client_id' => $clientId]);
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    /**
     * Count the number of contacts linked to a client.
     *
     * @param int $clientId
     * @return int
     */
    public function countLinkedContacts($clientId)
    {
        $stmt = $this->db->prepare("SELECT COUNT(*) FROM client_contacts WHERE client_id = :client_id");
        $stmt->execute(['client_id' => $clientId]);
        return $stmt->fetchColumn();
    }

    /**
     * Link a contact to a client if not already linked.
     *
     * @param int $clientId
     * @param int $contactId
     * @return bool
     */
    public function linkContact($clientId, $contactId)
    {
        // Prevent duplicate links
        $checkStmt = $this->db->prepare("SELECT COUNT(*) FROM client_contacts WHERE client_id = :client_id AND contact_id = :contact_id");
        $checkStmt->execute(['client_id' => $clientId, 'contact_id' => $contactId]);
        if ($checkStmt->fetchColumn() > 0) {
            return false; // Already linked
        }

        $stmt = $this->db->prepare("INSERT INTO client_contacts (client_id, contact_id) VALUES (:client_id, :contact_id)");
        return $stmt->execute(['client_id' => $clientId, 'contact_id' => $contactId]);
    }

    /**
     * Unlink a contact from a client.
     *
     * @param int $clientId
     * @param int $contactId
     * @return bool
     */
    public function unlinkContact($clientId, $contactId)
    {
        $stmt = $this->db->prepare("DELETE FROM client_contacts WHERE client_id = :client_id AND contact_id = :contact_id");
        return $stmt->execute(['client_id' => $clientId, 'contact_id' => $contactId]);
    }
}
